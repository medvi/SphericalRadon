function [isradon_result] = isradon(Mf,r_ind,p_ind,x,N_r,N_phi,N,R0)
% ISRADON
%   f(i) = (BIDF)(i)

    epsilon = 0.0000000001;

%    h_phi = 2*pi / (N_phi + 1);
    h_r = 2*R0/N_r;
    a = zeros(N_r+1, N_r);
    b = zeros(N_r+1, N_r);
    % ���������� ������������� a(m, m') � b(m, m')
    for m1 = 1:N_r+1 % m1 ~ m
    for m2 = 1:N_r % m2 ~ m'
        if (r_ind(m2) == 0 && r_ind(m1) == 0)
%             a(m1,m2) = 2*r_ind(m2+1)*(log(abs(r_ind(m2+1))) - 1);
%             b(m1,m2) = 0.5*...
%                 (...
%                     r_ind(m2+1)^2*(log(abs(r_ind(m2+1)^2))-1)...
%                 );
            a(m1,m2) = (r_ind(m2+1)-r_ind(m1))*log(epsilon)+...
                (r_ind(m2+1)+r_ind(m1))*log(epsilon)-2*r_ind(m2+1)-...
                (r_ind(m2)-r_ind(m1))*log(epsilon)-...
                (r_ind(m2)+r_ind(m1))*log(epsilon)+2*r_ind(m2);
            b(m1,m2) = -r_ind(m2)*a(m1,m2)+0.5*...
                (...
                    (r_ind(m2+1)^2-r_ind(m1)^2)*log(epsilon)-...
                    r_ind(m2+1)^2-...
                    (r_ind(m2)^2-r_ind(m1)^2)*log(epsilon)+...
                    r_ind(m2)^2 ...
                );
        elseif (m2+1 == m1)
%             a(m1,m2) = (r_ind(m2+1)+r_ind(m1))*log(abs(r_ind(m2+1)+r_ind(m1)))-2*r_ind(m2+1)-...
%                 (r_ind(m2)-r_ind(m1))*log(abs(r_ind(m2)-r_ind(m1)))-...
%                 (r_ind(m2)+r_ind(m1))*log(abs(r_ind(m2)+r_ind(m1)))+2*r_ind(m2);
%             b(m1,m2) = -r_ind(m2)*a(m1,m2)+0.5*...
%                 (...
%                     r_ind(m2+1)^2-...
%                     (r_ind(m2)^2-r_ind(m1)^2)*log(abs(r_ind(m2)^2-r_ind(m1)^2))+...
%                     r_ind(m2)^2 ...
%                 );
            a(m1,m2) = (r_ind(m2+1)-r_ind(m1))*log(epsilon)+...
                (r_ind(m2+1)+r_ind(m1))*log(abs(r_ind(m2+1)+r_ind(m1)))-2*r_ind(m2+1)-...
                (r_ind(m2)-r_ind(m1))*log(abs(r_ind(m2)-r_ind(m1)))-...
                (r_ind(m2)+r_ind(m1))*log(abs(r_ind(m2)+r_ind(m1)))+2*r_ind(m2);
            b(m1,m2) = -r_ind(m2)*a(m1,m2)+0.5*...
                (...
                    (r_ind(m2+1)^2-r_ind(m1)^2)*log(epsilon)-...
                    r_ind(m2+1)^2-...
                    (r_ind(m2)^2-r_ind(m1)^2)*log(abs(r_ind(m2)^2-r_ind(m1)^2))+...
                    r_ind(m2)^2 ...
                );
        elseif (m2 == m1)
%             a(m1,m2) = (r_ind(m2+1)-r_ind(m1))*log(abs(r_ind(m2+1)-r_ind(m1)))+...
%                 (r_ind(m2+1)+r_ind(m1))*log(abs(r_ind(m2+1)+r_ind(m1)))-2*r_ind(m2+1)-...
%                 (r_ind(m2)+r_ind(m1))*log(abs(r_ind(m2)+r_ind(m1)))+2*r_ind(m2);
%             b(m1,m2) = -r_ind(m2)*a(m1,m2)+0.5*...
%                 (...
%                     (r_ind(m2+1)^2-r_ind(m1)^2)*log(abs(r_ind(m2+1)^2-r_ind(m1)^2))-...
%                     r_ind(m2+1)^2-...
%                     r_ind(m2)^2 ...
%                 );
            a(m1,m2) = (r_ind(m2+1)-r_ind(m1))*log(abs(r_ind(m2+1)-r_ind(m1)))+...
                (r_ind(m2+1)+r_ind(m1))*log(abs(r_ind(m2+1)+r_ind(m1)))-2*r_ind(m2+1)-...
                (r_ind(m2)-r_ind(m1))*log(epsilon)-...
                (r_ind(m2)+r_ind(m1))*log(abs(r_ind(m2)+r_ind(m1)))+2*r_ind(m2);
            b(m1,m2) = -r_ind(m2)*a(m1,m2)+0.5*...
                (...
                    (r_ind(m2+1)^2-r_ind(m1)^2)*log(abs(r_ind(m2+1)^2-r_ind(m1)^2))-...
                    r_ind(m2+1)^2-...
                    (r_ind(m2)^2-r_ind(m1)^2)*log(epsilon)+...
                    r_ind(m2)^2 ...
                );
        else
            a(m1,m2) = (r_ind(m2+1)-r_ind(m1))*log(abs(r_ind(m2+1)-r_ind(m1)))+...
                (r_ind(m2+1)+r_ind(m1))*log(abs(r_ind(m2+1)+r_ind(m1)))-2*r_ind(m2+1)-...
                (r_ind(m2)-r_ind(m1))*log(abs(r_ind(m2)-r_ind(m1)))-...
                (r_ind(m2)+r_ind(m1))*log(abs(r_ind(m2)+r_ind(m1)))+2*r_ind(m2);
            b(m1,m2) = -r_ind(m2)*a(m1,m2)+0.5*...
                (...
                    (r_ind(m2+1)^2-r_ind(m1)^2)*log(abs(r_ind(m2+1)^2-r_ind(m1)^2))-...
                    r_ind(m2+1)^2-...
                    (r_ind(m2)^2-r_ind(m1)^2)*log(abs(r_ind(m2)^2-r_ind(m1)^2))+...
                    r_ind(m2)^2 ...
                );
        end
    end
    end
%    a = abs(a);
%    b = abs(b);

    % �������� D
    F = zeros(N_phi+1, N_r+1);
    for m = 1:N_r+1
        if (m == 1)
            F(:,m) = (m+0.5)*Mf(:,m+1)-2*m*Mf(:,m);
        elseif (m == N_r+1)
            F(:,m) = (m-0.5)*Mf(:,m-1)-2*m*Mf(:,m);
        else
            F(:,m) = (m+0.5)*Mf(:,m+1)-2*m*Mf(:,m)+(m-0.5)*Mf(:,m-1);
        end
    end
    F = F ./ h_r;

    % �������� I
    F_dub = zeros(N_phi+1,N_r+1);
    for k = 1:N_phi+1
        for m = 1:N_r+1
            summ = 0;
            for m1 = 1:N_r
                summ = summ+a(m,m1)*F(k,m1)+b(m,m1)*(F(k,m1+1)-F(k,m1))/h_r;
            end
            F_dub(k,m) = summ;
        end
    end
    
    % FBP with linear interpolation
    f = zeros(N+1, N+1);
    for i1 = 1:N+1
        disp(strcat(num2str(i1),'/',num2str(N+1)));
        for i2 = 1:N+1
            if (x(i1, i2, 1)^2 + x(i1, i2, 2)^2 > R0^2)
                continue;
            end
            % x(i) inside the disk
            value = sqrt((p_ind(1,:)-x(i1,i2,1)).^2+(p_ind(2,:)-x(i1,i2,2)).^2);
            for k = 1:N_phi+1
                findm = N_r;
                for m = 1:N_r
                    if (r_ind(m) <= value(k) && value(k) < r_ind(m+1))
                        findm = m;
                        break;
                    end
                end
                T = F_dub(k,findm)+(value(k)-r_ind(findm))*(F_dub(k,findm+1)-F_dub(k,findm))/h_r;
                f(i1,i2) = f(i1,i2) + T/(N_phi+2);
            end % end for k
        end % end for i2
    end % end for i1

    f = abs(f);
%    f = f/max(max(f));
    
    isradon_result = f;
end
